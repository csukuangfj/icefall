#!/usr/bin/env bash

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

set -eou pipefail

stage=0
stop_stage=5

# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/musan
#      This directory contains the following directories downloaded from
#       http://www.openslr.org/17/
#
#     - music
#     - noise
#     - speech
dl_dir=$PWD/download

# version can be either 1 or 2
# 1 means v0.01 and 2 means v0.02
version=1

#==============================================================================

. shared/parse_options.sh || exit 1

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download data"

  # If you have pre-downloaded speech_commands_v0.01.tar.gz and unzipped it to
  # /some/data/v1, where v1 contains directories like
  #
  #  LICENSE    _background_noise_  bird  down   five  house  marvin  no
  #  README.md  bed                 dog   eight  go    left   nine    one
  #
  # Then you can create a symlink to it to avoid re-downloading
  #
  #  cd $dl_dir
  #  mkdir -p SpeechCommands1
  #  cd SpeechCommands1
  #  ln -s /some/data/v1 speech_commands_v0.01
  #
  # If the test set for v1 is unzipped to /some/data/v1_test, you can also create a symlink for it:
  #
  #
  #  cd $dl_dir
  #  mkdir -p SpeechCommands1
  #  cd SpeechCommands1
  #  ln -s /some/data/v1_test speech_commands_test_set_v0.01
  #
  # Similarly, if you have pre-downloaded speech_commands_v0.02.tar.gz and unzipped it to
  # /some/data/v2, then you can create a symlink to it inside $dl_dir to avoid re-downloading.
  #
  #  cd $dl_dir
  #  cd $dl_dir
  #  mkdir SpeechCommands2
  #  cd SpeechCommands2
  #  ln -s /some/data/v2 speech_commands_v0.02
  #
  # If the test set for v2 is unzipped to /some/data/v2_test, you can also create a symlink for it:
  #
  #
  #  cd $dl_dir
  #  mkdir -p SpeechCommands2
  #  cd SpeechCommands2
  #  ln -s /some/data/v2_test speech_commands_test_set_v0.02

  if [ ! -d $dl_dir/SpeechCommands$version ]; then
    lhotse download speechcommands $version $dl_dir

    # The above command should generate the follow directories and files
    # (Using version 1 as an example)
    #
    # (py38) kuangfangjun:KWS$ ls download/SpeechCommands1/
    # speech_commands_test_set_v0.01  speech_commands_test_set_v0.01.tar.gz  speech_commands_v0.01  speech_commands_v0.01.tar.gz

    # (py38) kuangfangjun:KWS$ ls download/SpeechCommands1/speech_commands_v0.01
    #   LICENSE             bed   dog    five  happy  marvin  off  right   six               three  up                   yes
    #   README.md           bird  down   four  house  nine    on   seven   stop              tree   validation_list.txt  zero
    #   _background_noise_  cat   eight  go    left   no      one  sheila  testing_list.txt  two    wow

    # (py38) kuangfangjun:KWS$ ls download/SpeechCommands1/speech_commands_test_set_v0.01
    #   LICENSE  README.md  _silence_  _unknown_  down  go  left  no  off  on  right  stop  up  yes
  fi

  # If you have pre-downloaded it to /path/to/musan,
  # you can create a symlink
  #
  #   ln -sfv /path/to/musan $dl_dir/
  #
  if [ ! -d $dl_dir/musan ]; then
    lhotse download musan $dl_dir
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare SpeechCommands manifest"
  # We assume that you have downloaded the SpeechCommands corpus
  # to $dl_dir/SpeechCommands$version
  mkdir -p data/manifests
  if [ ! -e data/manifests/.speech_commands_v$version.done ]; then
    lhotse prepare speechcommands $version $dl_dir/SpeechCommands$version data/manifests
    touch data/manifests/.speech_commands_v$version.done
  fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Compute fbank for speech_commands_v$version"
  mkdir -p data/fbank
  if [ ! -e data/fbank/.speech_commands_v$version.done ]; then
    ./local/compute_fbank_speech_commands.py --version $version
    touch data/fbank/.speech_commands_v$version.done
  fi
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  mkdir -p data/lang
  if [ ! -e data/lang/tokens.txt ]; then
cat <<EOF > data/lang/tokens.txt
BLK 0
SIL 1
ok 2
down 3
up 4
stop 5
EOF
  fi
fi
